第六单：重新组织函数
    Extract Method ： 提炼函数。
        症状：你有一段代码可以被组织在一起并独立出来。
        处理：将这段代码放进一个独立函数中，并让函数名称解释该函数的用途。
    Inline Method ：内联函数。
        症状：一个函数的本体与名称同样清楚易懂。
        处理：在函数调用点插入函数本体，然后移除该函数。
    Inline Temp ：内联临时变量。
    Replace Temp with Query ：以查询取代临时变量
    Introduce Explaining Variable ：引入解释性变量。通常可用Extract Method替代，除非用Extract Method工作量太大时，才考虑使用此方法；
    Split Temporary Variable ：分解临时变量。
    Remove Assignments to Parameters ：移除对参数的赋值
    Replace Method with Method Object ：以函数对象取代函数
    Substitute Algorithm ：替换算法

第七单：在对象之间搬移特性
    Move Method ：搬移函数。
        症状：你的程序中，有个函数与其所驻类之外的另一个类进行更多交流：调用后者，或被后者调用。
        处理：在该函数最常引用的类中建立一个有着类似行为的新函数。将旧函数变成一个单纯的委托函数，或是将旧函数完全移除
    Move Field ：搬移字段。
        症状：你的程序中，某个字段被其所驻类之外的另一个类更多地用到。
        处理：在目标类新建一个字段，修改源字段的所有用户，令它们改用新的字段。
    Extract Class ：提炼类。
        症状：某个类做了应该由两个类做的事。
        处理：建立一个新类，将相关的字段和函数从旧类搬移到新类。
    Inline Class ：将类内联化。
        症状：某个类没有做太多事情。
        处理：将这个类的所有特性搬移到另一个类中，然后移除原类。
    Hide Delegate ：隐藏“委托关系”。
        症状：客户通过一个委托类来调用另一个对象。
        处理：在服务类上建立客户所需的所有函数，用以隐藏委托关系。
    Remove Middle Man ：移除中间人。
        症状：某个类做了过多的简单委托动作。
        处理：让客户直接调用受托类。
    Introduce Foreign Method ：引入外加函数。
        症状：你需要为提供服务的类增加一个函数，但你无法修改这个类。
        处理：在客户类中建立一个函数，并以第一参数形式传入一个服务类实例。
    Introduce Local Extension ：引入本地扩展。
        症状：你需要为服务类提供一些额外函数，但你无法修改这个类。
        处理：建立一个新类，使它包含这些额外函数。让这个扩展品成为源类的子类或包装类。

第八单：重新组织数据
    Self Encapsulate Field ：自封装字段。
        症状：你直接访问一个字段，但与字段之间的耦合关系逐渐变得笨拙。
        处理：为这个字段建立取值/设值函数，并且只以这些函数来访问字段。
    Replace Data Value with Object ：以对象取代数据值。
        症状：你有一个数据项，需要与其它数据和行为一起使用才有意义。
        处理：将数据项变成对象。
    Change Value to Reference ：将值对象改为引用对象。
        症状：你从一个类衍生出许多彼此相等的实例，希望将它们替换为同一个对象。
        处理：将这个值对象变成引用对象。
    Change Reference to Value ：将引用对象改为值对象。
        症状：你有一个引用对象，很小且不可变，而且不易管理。
        处理：将它变成一个值对象。
8.5 Replace Array with Object ：以对象取代数组。
        症状：你有一个数组，其中的元素各自代表不同的东西。
        处理：以对象替换数组。对于数组中的每个元素，以一个字段来表示。
    Duplicate Observed Data ：复制“被监视数据”。
        症状：你有一些领域数据置身于GUI控件中，而领域函数需要访问这些数据。
        处理：将该数据复制到一个领域对象中。建立一个Observer模式，用以同步领域对象和GUI对象内的重复数据。
    Change Unidirectional Association to Bidirectional ：将单向关联改为双向关联。
        症状：两个类都需要使用对方特性，但期间只有一条单向连接。
        处理：添加一个反向指针，并使修改函数能够同时更新两条连接。
    Change Bidirectional Association to Unidirectional ：将双向关联改为单向关联。
        症状：两个类之间有双向关联，但其中一个类如今不再需要另一个类的特性。
        处理：去除不必要的关联。
    Replace Magic Number with Symbolic Constant ：以字面常量取代魔法数。
        症状：你有一个字面数值，带有特别含义。
        处理：建立一个新类，使它包含这些额外函数。让这个扩展品成为源类的子类或包装类。
8.10 Encapsulate Field ：封装字段。
        症状：你的类中存在一个public字段。
        处理：将它声明为private，并提供相应的访问函数。
    Encapsulate Collection ：封装集合。
        症状：有个函数返回一个集合。
        处理：让这个函数返回该集合的一个只读副本，并在这个类中提供添加/移除集合元素的函数。
    Replace Record with Data Class ：以数据类取代记录。
        症状：你需要面对传统编程环境中的记录结构。
        处理：为该记录创建一个“哑”数据对象。
    Replace Type Code with Class ：以类取代类型码。
        症状：类之中有一个数值类型码，但它并不影响类的行为。
        处理：以一个新的类替换该数值类型码。
    Replace Type Code with Subclasses ：以子类取代类型码。
        症状：你有一个不可变的类型码，它会影响类的行为。
        处理：以子类替代这个类型码。
8.15 Replace Type Code with State/Strategy ：以State/Strategy取代类型码。
        症状：你有一个类型码，它会影响类的行为，但你无法通过继承手法消除它。
        处理：以状态对象取代类型码。
    Replace Subclass with Fields ：以字段取代子类。
        症状：你的各个子类的唯一差别只在“返回常量数据”的函数身上。
        处理：修改这些函数，使它们返回超类中的某个（新增）字段，然后销毁子类。

第九单：简化条件表达式
     Decompose Conditional ：分解条件表达式。
         症状：你有一个复杂的条件（if - then - else）语句。
         处理：从if、then、else三个段落中分别提炼出独立函数。
     Consolidate Conditional Expression ：合并条件表达式。
              症状：你有一系列条件测试，都得到相同结果。
              处理：将这些测试合并为一个表达式，并将这个条件表达式提炼成为一个独立函数。
     Consolidate Duplicate Conditional Fragments ：合并重复的条件片段。
              症状：在条件表达式的每个分支上有着相同的一段代码。
              处理：将这段重复代码搬移到条件表达式之外。
     Remove Control Flag ：移除控制标记。
              症状：在一系列布尔表达式中，某个变量带有“控制标记”的作用。
              处理：以break语句或return语句取代控制标记。
9.5  Replace Nested Conditional with Guard Clauses：分解条件表达式。
              症状：函数中的条件逻辑使人难以看清正常的执行路径。
              处理：使用卫语句表现所有特殊情况。
     Replace Conditional with Polymorphism：以多态取代条件表达式。
              症状：你手上有个条件表达式，它根据对象类型的不同而选择不同的行为。
              处理：将这个条件表达式的每个分支放进一个子类内的覆写函数中，然后将原始函数声明为抽象函数。